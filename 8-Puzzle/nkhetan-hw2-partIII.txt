@author: Nihar Khetan (nkhetan@indiana.edu)

Question 1:  How would you define “real difficulty” for this task, to give a good basis for assessing performance as a function of [real] difficulty?
  (This is different from the value a heuristic might estimate for the difficulty.)
  	Answer: I will define real difficulty for this task on time complexity to go through each and every node generated by expandProcedure. Depending on current state 8 Puzzle problem 
	can move to minimum of two new states (when blank at corner) or maximum of 4 new states (when blank at center). Thus a tree is generated with branching factor [2,4]. The real 
	difficulty is traversing these each of [2,4]^d states where d is the depth. Traversing can take lot of time until goal state is not reached or in case of DFS, solution is incomplete
	as the depth of the nodes at which it is trying to explore may never reach a goal state within limits defined. 
	The difficulty also depends upon initial state which might be closer to the goal state and the heuristic function chosen in case of informed search.
	Thus one aspect of performance can be how quickly can it reach the goal state which again depends on the number of nodes visited. Second aspect is the optimal path which it should
	take to the goal state.
	
Question 2: How does the number of states generated vary as a function of the length of the optimal solution path, for the different versions?  Graph your results.
	Answer: nkhetan-hw2-graphs.pdf

Question 3: How does the effective branching factor compare for all methods?  Graph your results for at least 3 different search depths. 
	Answer: nkhetan-hw2-graphs.pdf -> For Uninformed search Branching factor is comparable higher as compared to Informed Search. Their is a slight improvement of branching factor
	from Heuristic 1 to Heuristic 2 and it is the least in case of A* search. Also I noted one thing that for A* search it always returns the most optimal path to goal state so in this
	process of finding the optimal path it might expand more number of nodes thus making branching factor comparable to Heuristic 2. 
	Effective branching factor = N power (1/d) where N is number of states generated and d is the depth at which solution is found.

Question 4: Do informal timing of your program using python’s “time.time.” How difficult a problem (by your definition above) could each of your methods solve in 5 minutes?
	Answer: Below is a table generated on doing timing for solutions.
	All time (millisecond) originally is multiplied by 105 (10 raised to power 5)
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Initial State		BFS			DFS					Heuristic 1			Heuristic 2			A* Search 
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Easy			99			15799					100					99				0
	Medium			1000			699					99					99				99
	Hard			4199			1500000 Limit				209					299				300
	Hardest			517599			1500000 Limit				181999					3299				24099
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------
	BFS can solve even the toughest of the problems but it takes lot of time. In few cases limit is reached especially cases involving depth more than 50.
	DFS can solve only two problems of initial states of depth<=20 and on most cases Limit is reached. Even in 5 minutes it is more probable that it will not find a solution. 
	Informed search methods which are Heuristic 1, Heuristic 2 and A* search can solve even the toughest of the problems in milliseconds. So in 5 minutes it can solve any problem.
